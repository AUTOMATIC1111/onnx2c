
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../src)
set(ONNX_BACKEND_TEST_DATA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../onnx/onnx/backend/test/data/)
set(ONNX_NODE_TEST_DATA_DIR ${ONNX_BACKEND_TEST_DATA_DIR}/node/)

add_executable( testrun
	onnx_backend_tests_runner.cc)
target_link_libraries(testrun onnx2c_lib protobuf)

function( ONNX_type_test node_name data_dir test_ctest_name accuracy test_data_set)

	add_custom_command(
		OUTPUT
		${node_name}_${test_data_set}_generated.c
		COMMAND
		testrun ${data_dir} ${accuracy} ${test_data_set} > ${node_name}_${test_data_set}_generated.c
		DEPENDS
		#TODO also depends on test data -> don't depend, always run
		testrun
		)

	add_executable( ${node_name}_${test_data_set}_test
		${node_name}_${test_data_set}_generated.c
		)
	target_compile_options( ${node_name}_${test_data_set}_test
		PRIVATE
			-Wall -Werror
			#TODO: space for output tensor is generated, but not used.
			-Wno-unused-variable
		)

	add_test( ${test_ctest_name}
		${node_name}_${test_data_set}_test
		)
endfunction()

function( ONNX_backend_node_test node_name)
	ONNX_type_test(
		${node_name}
		${ONNX_NODE_TEST_DATA_DIR}/test_${node_name}
		ONNX_backend_${node_name}
		0.00001
		0
	)
endfunction()

ONNX_backend_node_test(add)
ONNX_backend_node_test(add_bcast)

ONNX_backend_node_test(conv_with_strides_no_padding)
ONNX_backend_node_test(conv_with_strides_padding)
ONNX_backend_node_test(conv_with_strides_and_asymmetric_padding)
ONNX_type_test(operator_conv ${ONNX_BACKEND_TEST_DATA_DIR}/pytorch-operator/test_operator_conv ONNX_backend_pytorch_conv 0.00001 0)

ONNX_backend_node_test(flatten_axis0)
ONNX_backend_node_test(flatten_axis1)
ONNX_backend_node_test(flatten_axis2)
ONNX_backend_node_test(flatten_axis3)
ONNX_backend_node_test(flatten_default_axis)
ONNX_backend_node_test(flatten_negative_axis1)
ONNX_backend_node_test(flatten_negative_axis2)
ONNX_backend_node_test(flatten_negative_axis3)
ONNX_backend_node_test(flatten_negative_axis4)

ONNX_backend_node_test(matmul_2d)

ONNX_backend_node_test(maxpool_2d_default)

ONNX_backend_node_test(relu)

ONNX_backend_node_test(reshape_extended_dims)
#ONNX_backend_node_test(reshape_negative_extended_dims)  # zero and negative dimensions TBD
ONNX_backend_node_test(reshape_reduced_dims)
ONNX_backend_node_test(reshape_reordered_last_dims)
#ONNX_backend_node_test(reshape_zero_dim)
#ONNX_backend_node_test(reshape_negative_dim)
ONNX_backend_node_test(reshape_one_dim)
ONNX_backend_node_test(reshape_reordered_all_dims)
#ONNX_backend_node_test(reshape_zero_and_negative_dim)


# More end-to-end kind of tests here
add_subdirectory(tfl_helloworld)
ONNX_type_test(mnist ${CMAKE_CURRENT_SOURCE_DIR}/mnist mnist0 0.01 0)
ONNX_type_test(mnist ${CMAKE_CURRENT_SOURCE_DIR}/mnist mnist1 0.01 1)
ONNX_type_test(mnist ${CMAKE_CURRENT_SOURCE_DIR}/mnist mnist2 0.01 2)
add_custom_command(OUTPUT mnist_generated.c
	COMMAND onnx2c ${CMAKE_CURRENT_SOURCE_DIR}/mnist/model.onnx > mnist_generated.c)
add_executable(mnist_static mnist/test.cc mnist_generated.c)
target_link_libraries(mnist_static onnx2c_lib protobuf)
add_test(mnist_static mnist_static)

